# top level URL - set to host name attached to the virtual address on the load balancer
cas.server.name=https://${cas.host.name}:8443

# URL of the CAS web application on the web/application server.
# This param gets prepended to the various CAS-specific URLs used by cas
cas.server.prefix=${cas.server.name}/cas

# name of the CAS host to be appended to ticket IDs (left it empty to default to specific host)
cas.host.name=

###############################
# encryption and signing keys
###############################

# ticket granting cookie
cas.tgc.secure=true
cas.tgc.crypto.enabled=true
cas.tgc.crypto.signing.key=YmzEmymXzNTErugrWb_Oz6HGogw0cY1TEfVTq8wbYwtbEyshYRxQ-V8QjgIZ6rCR6mUpZl0BbywNagdp0_8B1A
cas.tgc.crypto.signing.keySize=512
cas.tgc.crypto.encryption.key=hNiz5NscV3fowdONFjc5QfGStjae8bsmsAtluWrldo0
cas.tgc.crypto.encryption.keySize=256

# JWT tickets and token
cas.authn.token.crypto.enabled=true
cas.authn.token.crypto.signing.key=VAJ_GyuUCktB-lJjXFJmTBZ_gfrDe1E0AZbREK_B8NlKq1imedKrf7bgm7Z-gubJn5ZRo3yd2x98n4N72oxWYw
cas.authn.token.crypto.signing.keySize=512
cas.authn.token.crypto.encryption.key=Tn5ayfFOF1iim57THFu6RyuNsZMC6l44LY47V9RmadY
cas.authn.token.crypto.encryption.keySize=256

# enable JWT service ticket
cas.authn.token.crypto.signingEnabled=true
cas.authn.token.crypto.encryptionEnabled=true

# Encryption is not enabled for [Token/JWT Tickets]. The cipher [RegisteredServiceJwtTicketCipherExecutor] will only attempt to produce signed objects
#Using [OidcEchoingWebFingerUserInfoRepository] to locate webfinger resources, which is NOT appropriate for production purposes, as it will always echo back the given username/email address and is only useful for testing/demo purposes. Consider choosing and configuring a different repository implementation for locating and fetching user information for webfinger resources, etc.

# oauth
cas.authn.oauth.crypto.enabled=true
cas.authn.oauth.crypto.signing.key=ohcU7P3ADf73YTonKOMpTEeSlQtjNf3MS3DzuJQkMRB8IKvLmQJU1YoW86AhIOYwkoie2aGQ_aINksNYhky49Q
cas.authn.oauth.crypto.signing.keySize=512
cas.authn.oauth.crypto.encryption.key=HG_xTNp0osLfoCXcftxedYF_h8ax-_kNGuHpPjYdoDo
cas.authn.oauth.crypto.encryption.keySize=256

# oauth (access token)
cas.authn.oauth.accessToken.crypto.enabled=true
cas.authn.oauth.accessToken.crypto.signing.key=MPx8FGBm5mq1Dv1wRRGNST0srvtGxwXC3HktaFknba1Le7SzBgHX-tsk452aTtkdV4LHCFLRdOCoFLBynzSkiQ
cas.authn.oauth.accessToken.crypto.signing.keySize=512
cas.authn.oauth.accessToken.crypto.encryption.key=SYapTno4_i8j2FlOt7y0ffZ6163mm63MM21Itv-tZuQ
cas.authn.oauth.accessToken.crypto.encryption.keySize=256


# protocol tickets
cas.ticket.crypto.enabled=true
cas.ticket.crypto.signing.key=cKNw4dyVGKnAWpNf3nUWPvqm2WsyECe19U8gmYhAgPcZQ5KgmswDmzrHdY8CFKLJS1UQhgJ7pJ8Ixqc1eKZxEA
cas.ticket.crypto.signing.keySize=512
cas.ticket.crypto.encryption.key=QxiIrih2XaodZr2gyd9twGMVep4QnOCqQMkGGuT1NIM
cas.ticket.crypto.encryption.keySize=256

# unlike TGC, the encryption key for Spring WebFlow is not a JSON Web Key.
# itâ€™s a randomly-generated string of 16 (by default) octets, Base64-encoded
# key can be generated using "openssl rand -base64 16"
cas.webflow.crypto.encryption.key=wLwWm9jOMvUyqpsLmPOh7g==
cas.webflow.crypto.encryption.keySize=16
cas.webflow.crypto.signing.key=hTOLXjYjDGJrZQVF7j51SMwQXbGvayxPTHJPjGF3pOf5fevCCkUi0KerHMVmObU0Up176kM4KjhgAnxF9avwGg
cas.webflow.crypto.signing.keySize=512

# ticket registry (redis)
# unlike TGC, the encryption key for Spring WebFlow is not a JSON Web Key.
cas.ticket.registry.redis.crypto.enabled=true
cas.ticket.registry.redis.crypto.encryption.key=zS0csnhZxS3th6fH7srtGA==
cas.ticket.registry.redis.crypto.encryption.keySize=16
cas.ticket.registry.redis.crypto.signing.key=xB0HeRtAiztqJAJDfv-1-FPJGPXPf2ENf881M4_RWG_gvE0lleVrESASNVZX4xB3WP4kGu-meqixjsz6QM3RMA
cas.ticket.registry.redis.crypto.signing.keySize=512

###################
# Webflow
###################
# manage the authentication sequence, and this also needs to be encrypted

###################
# Ticket Granting Cookie
###################
# CAS server uses a ticket granting cookie in the browser to maintain 
# login state during single sign-on sessions

# cas.tgc.path=
cas.tgc.maxAge=-1
cas.tgc.domain=linux.test
cas.tgc.name=TGC
cas.tgc.secure=true
cas.tgc.httpOnly=true
cas.tgc.rememberMeMaxAge=1209600
cas.tgc.pinToSession=true

cas.ticket.tgt.rememberMe.enabled=false

###################
# service tickets
###################
# cas.ticket.st.maxLength=20
cas.ticket.st.numberOfUses=1
cas.ticket.st.timeToKillInSeconds=10

###################
# ticket registry
###################

cas.ticket.registry.redis.host=redis-master
cas.ticket.registry.redis.port=6379
# cas.ticket.registry.redis.database=0
# cas.ticket.registry.redis.password=
cas.ticket.registry.redis.timeout=2000
cas.ticket.registry.redis.useSsl=false

# cas.ticket.registry.redis.pool.max-active=20
# cas.ticket.registry.redis.pool.maxIdle=8
# cas.ticket.registry.redis.pool.minIdle=0
# cas.ticket.registry.redis.pool.maxActive=8
# cas.ticket.registry.redis.pool.maxWait=-1
# cas.ticket.registry.redis.pool.numTestsPerEvictionRun=0
# cas.ticket.registry.redis.pool.softMinEvictableIdleTimeMillis=0
# cas.ticket.registry.redis.pool.minEvictableIdleTimeMillis=0
# cas.ticket.registry.redis.pool.lifo=true
# cas.ticket.registry.redis.pool.fairness=false

# cas.ticket.registry.redis.pool.testOnCreate=false
# cas.ticket.registry.redis.pool.testOnBorrow=false
# cas.ticket.registry.redis.pool.testOnReturn=false
# cas.ticket.registry.redis.pool.testWhileIdle=false

cas.ticket.registry.redis.sentinel.master=master
cas.ticket.registry.redis.sentinel.node[0]=redis-sentinel:26379

# disable password management
# cas.authn.pm.enabled=true

###################
# session management
###################

# Enable server-side session management
# cas.webflow.session.storage=false
# spring.session.store-type=redis
# spring.redis.host=localhost
# spring.redis.password=secret
# spring.redis.port=6379

###################
# authentication
###################

# remove default users
# cas.authn.accept.users=
# cas.authn.accept.name=
# cas.authn.accept.credentialCriteria=

# cas.authn.attributeRepository.ldap[0].attributes.uid=uid
# cas.authn.attributeRepository.ldap[0].attributes.displayName=displayName
# cas.authn.attributeRepository.ldap[0].attributes.cn=commonName
# cas.authn.attributeRepository.ldap[0].attributes.affiliation=groupMembership

# cas.authn.attributeRepository.defaultAttributesToRelease=cn,givenName,uid,affiliation

#
# Define attributes to be retrieved from LDAP as part of the same authentication transaction
# The left-hand size notes the source while the right-hand size indicate an optional renaming/remapping
# of the attribute definition. The same attribute name is allowed to be mapped multiple times to
# different attribute names.
#
# cas.authn.ldap[0].principalAttributeList=sn,cn:commonName,givenName,eduPersonTargettedId:SOME_IDENTIFIER

# cas.authn.ldap[0].collectDnAttribute=false
# cas.authn.ldap[0].principalDnAttributeName=principalLdapDn
# cas.authn.ldap[0].allowMultiplePrincipalAttributeValues=true
# cas.authn.ldap[0].allowMissingPrincipalAttributeValue=true
# cas.authn.ldap[0].credentialCriteria=

###################
# oauth
###################
# cas.authn.oauth.refreshToken.timeToKillInSeconds=2592000

# cas.authn.oauth.code.timeToKillInSeconds=30
# cas.authn.oauth.code.numberOfUses=1

# cas.authn.oauth.accessToken.timeToKillInSeconds=7200
# cas.authn.oauth.accessToken.maxTimeToLiveInSeconds=28800

# cas.authn.oauth.deviceToken.timeToKillInSeconds=2592000
# cas.authn.oauth.deviceToken.refreshInterval=PT15S
# cas.authn.oauth.deviceToken.userCodeLength=8

# cas.authn.oauth.grants.resourceOwner.requireServiceHeader=true

# cas.authn.oauth.userProfileViewType=NESTED|FLAT

#########################
# HTTP XSS / CORS / CSRF
#########################

# cas.httpWebRequest.header.xframe=true
# cas.httpWebRequest.header.xframeOptions=ALLOW

# cas.httpWebRequest.header.xss=true
# cas.httpWebRequest.header.xssOptions=1; mode=block

# cas.httpWebRequest.cors.enabled=false
# cas.httpWebRequest.cors.allowCredentials=true
# cas.httpWebRequest.cors.allowOrigins[0]=*
# cas.httpWebRequest.cors.allowMethods[0]=*
# cas.httpWebRequest.cors.allowHeaders[0]=*
# cas.httpWebRequest.cors.maxAge=3600
# cas.httpWebRequest.cors.exposedHeaders[0]=

# cas.httpWebRequest.customHeaders.headerName1=headerValue1
# cas.httpWebRequest.customHeaders.headerName2=headerValue2

###################
# monitoring
###################
management.endpoints.web.exposure.include=info,health,status,configurationMetadata

###################
# logging
###################
logging.config: file:/etc/cas/config/log4j2.xml
logging.level.org.apereo.cas=DEBUG



